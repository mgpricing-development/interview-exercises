on:
  push:
    branches: [main]
    paths:
      - "frontend/**"
      - "backend/**"

name: Build and Deploy

jobs:
  frontend:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Short SHA
        id: vars
        run: echo "::set-output name=short_sha::$(git rev-parse --short HEAD)"

      - name: Use Node 14
        uses: actions/setup-node@v1
        with:
          node-version: 14

      - run: npm install
        working-directory: frontend

      - run: npm run build
        working-directory: frontend
        env:
          CI: false

      - name: Record SHA into text file
        run: echo "${{ steps.vars.outputs.short_sha }}" > build/sha.txt
        working-directory: frontend

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Copy tarball to S3 codesets bucket
        run: aws s3 cp frontend/build s3://qa-example-website/

      - name: Invalidate Cloudfront distribution
        run: aws cloudfront create-invalidation --distribution-id E3GQ9JCM6SCDS4 --paths '/*'

  backend:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest

    strategy:
      matrix:
        container: [api]
        include:
          - container: api
            ecrRepositoryName: qa-example
            dockerFile: Dockerfile
            containerName: qa-example
            taskDefinitionFile: unified-task-definition.json
            awsAccountId: "077551424359"

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Short SHA
        id: vars
        run: echo "::set-output name=short_sha::$(git rev-parse --short HEAD)"

      - name: Use Node 14
        uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        working-directory: backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ matrix.ecrRepositoryName }}
          IMAGE_TAG: ${{ steps.vars.outputs.short_sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ${{ matrix.dockerFile }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Find and replace environment name in Task Definition file
        run: sed -i 's/ENVIRONMENT_NAME/${{ matrix.environmentName }}/g' ${{ matrix.taskDefinitionFile }}
        working-directory: backend

      - name: Find and replace commit ref in Task Definition file
        run: sed -i 's/COMMIT_REF/${{ steps.vars.outputs.short_sha }}/g' ${{ matrix.taskDefinitionFile }}
        working-directory: backend

      - name: Find and replace container name in Task Definition file
        run: sed -i 's/CONTAINER_NAME/${{ matrix.containerName }}/g' ${{ matrix.taskDefinitionFile }}
        working-directory: backend

      - name: Find and replace AWS account id in Task Definition file
        run: sed -i 's/AWS_ACCOUNT_ID/${{ matrix.awsAccountId }}/g' ${{ matrix.taskDefinitionFile }}
        working-directory: backend

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: backend/${{ matrix.taskDefinitionFile }}
          container-name: ${{ matrix.containerName }}
          image: ${{ matrix.awsAccountId }}.dkr.ecr.eu-west-1.amazonaws.com/${{ matrix.ecrRepositoryName }}:${{ steps.vars.outputs.short_sha }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ matrix.ecrRepositoryName }}
          cluster: qa-example
          wait-for-service-stability: true
